import pytest
import os
import tempfile
from unittest.mock import patch, Mock
import pyperclip


class TestClipboardOperations:
    """—Ç–µ—Å—Ç—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞"""
    
    def test_clipboard_copy_paste(self):
        """—Ç–µ—Å—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        test_text = "Test clipboard text"
        pyperclip.copy(test_text)
        result = pyperclip.paste()
        assert result == test_text

    def test_clipboard_empty(self):
        """—Ç–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        pyperclip.copy("")
        result = pyperclip.paste()
        assert result == ""

    def test_clipboard_unicode(self):
        """—Ç–µ—Å—Ç unicode —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä–µ –æ–±–º–µ–Ω–∞"""
        test_text = "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä! üåç"
        pyperclip.copy(test_text)
        result = pyperclip.paste()
        assert result == test_text


class TestFileOperations:
    """—Ç–µ—Å—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    
    def setup_method(self):
        """—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        self.temp_dir = tempfile.mkdtemp()
        self.test_file = os.path.join(self.temp_dir, "test.json")
    
    def teardown_method(self):
        """–æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if os.path.exists(self.test_file):
            os.remove(self.test_file)
        os.rmdir(self.temp_dir)
    
    def test_file_exists_check(self):
        """—Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞"""
        assert not os.path.exists(self.test_file)
        
        with open(self.test_file, 'w') as f:
            f.write('{"test": true}')
        
        assert os.path.exists(self.test_file)

    def test_file_read_write(self):
        """—Ç–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞"""
        test_content = "Test file content"
        
        with open(self.test_file, 'w', encoding='utf-8') as f:
            f.write(test_content)
        
        with open(self.test_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        assert content == test_content 