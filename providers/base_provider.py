"""–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM."""

from abc import ABC, abstractmethod
from typing import Any, Dict, Optional, Callable, Coroutine, List
import os
import logging
import aiohttp
import json

logger = logging.getLogger(__name__)


class BaseProvider(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM."""

    def __init__(self, model_info: Dict[str, Any]):
        if not isinstance(model_info, dict):
            raise TypeError("model_info –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º")

        self.model_name = model_info.get("model_name")
        self.access_token = model_info.get("access_token")
        self.api_endpoint = model_info.get("api_endpoint")
        self.model_info = model_info

    def _is_debug_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω –ª–∏ debug —Ä–µ–∂–∏–º."""
        import main

        return getattr(main, "DEBUG_MODE", False)

    async def _log_http_request(
        self, method: str, url: str, headers: dict, data: dict = None
    ) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –≤ debug —Ä–µ–∂–∏–º–µ."""
        if not self._is_debug_mode():
            return

        logger.debug(f"\n{'=' * 80}")
        logger.debug(f"üîÑ HTTP REQUEST: {method} {url}")
        logger.debug(f"{'=' * 80}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∫–ª—é—á–∞—è API –∫–ª—é—á–∏
        logger.debug("üìã HEADERS (FULL - INCLUDING API KEYS):")
        for key, value in headers.items():
            logger.debug(f"  {key}: {value}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        if data:
            logger.debug(f"\nüì§ REQUEST BODY:")
            if isinstance(data, dict):
                logger.debug(json.dumps(data, indent=2, ensure_ascii=False))
            else:
                logger.debug(str(data))

        logger.debug(f"{'=' * 80}")

    async def _log_http_response(
        self, response: aiohttp.ClientResponse, response_text: str
    ) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç HTTP –æ—Ç–≤–µ—Ç –≤ debug —Ä–µ–∂–∏–º–µ."""
        if not self._is_debug_mode():
            return

        logger.debug(f"\n{'=' * 80}")
        logger.debug(f"üì® HTTP RESPONSE: {response.status} {response.reason}")
        logger.debug(f"{'=' * 80}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        logger.debug("üìã RESPONSE HEADERS:")
        for key, value in response.headers.items():
            logger.debug(f"  {key}: {value}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
        logger.debug(f"\nüì• RESPONSE BODY:")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            parsed_json = json.loads(response_text)
            logger.debug(json.dumps(parsed_json, indent=2, ensure_ascii=False))
        except:
            # –ï—Å–ª–∏ –Ω–µ JSON, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            logger.debug(response_text)

        logger.debug(f"{'=' * 80}\n")

    async def _handle_http_error(
        self, response: aiohttp.ClientResponse, operation: str = "API request"
    ) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –æ—à–∏–±–∫–∏ —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            response: HTTP –æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π
            operation: –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏
        """
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ debug —Ä–µ–∂–∏–º–µ
        error_text = ""
        try:
            error_text = await response.text()
            await self._log_http_response(response, error_text)
        except:
            pass

        provider_name = self.__class__.__name__.replace("Provider", "")

        if response.status == 401:
            raise Exception(
                f"API –∫–ª—é—á {provider_name} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. "
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. "
                f"(HTTP {response.status})"
            )
        elif response.status == 403:
            raise Exception(
                f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è {provider_name}. "
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–∞. (HTTP {response.status})"
            )
        elif response.status == 429:
            raise Exception(
                f"–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {provider_name}. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. (HTTP {response.status})"
            )
        elif response.status == 500:
            raise Exception(
                f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ {provider_name}. "
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. (HTTP {response.status})"
            )
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤ debug —Ä–µ–∂–∏–º–µ
            error_details = (
                f" - {error_text[:200]}..."
                if error_text and self._is_debug_mode()
                else ""
            )
            raise Exception(
                f"–û—à–∏–±–∫–∞ {operation} –≤ {provider_name}: "
                f"HTTP {response.status}{error_details}"
            )

    @abstractmethod
    async def translate(
        self,
        messages: list,
        target_lang: str,
        streaming_callback: Optional[Callable[[str], Coroutine]] = None,
    ) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LLM API."""
        pass

    @abstractmethod
    async def get_available_models(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
        pass
